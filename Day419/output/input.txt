649
108
7 16 10 0 5 6
87 8 14 4 7 5
97 6 13 7 7 9
13 42 18 7 8 2
48 93 12 7 17 1
15 25 12 2 17 7
8 6 13 0 3 7
17 17 8 3 11 3
16 89 8 1 3 7
25 54 3 2 6 7
67 92 2 10 18 6
69 52 5 4 9 10
40 29 9 8 10 6
98 14 1 10 17 8
11 46 18 7 18 6
45 7 19 9 15 7
67 76 20 1 2 9
48 87 4 2 5 6
36 64 7 8 19 6
54 39 18 0 17 4
86 87 2 0 19 8
34 55 17 2 13 3
1 82 17 8 20 10
46 85 10 5 13 3
33 57 15 2 17 8
21 44 4 0 20 8
38 62 11 2 19 6
53 51 4 7 14 4
14 91 16 7 13 9
20 13 1 4 8 7
28 88 14 8 10 2
69 100 18 5 14 5
7 49 1 8 15 10
3 63 11 0 11 4
64 66 9 3 18 7
11 46 18 10 15 10
65 77 1 8 17 9
12 48 16 0 15 5
38 93 13 2 18 10
2 65 4 6 14 1
97 82 13 5 15 6
63 28 5 10 11 3
92 81 8 1 12 1
57 81 1 1 16 9
85 16 10 9 13 6
40 54 7 10 15 6
43 56 9 4 20 1
56 82 14 6 20 8
35 46 3 2 2 4
55 98 13 3 16 5
30 83 5 1 17 10
50 32 4 9 14 2
10 37 5 9 12 9
82 67 7 9 12 10
60 72 19 5 11 8
95 14 10 9 15 10
35 99 16 10 16 2
79 93 15 2 10 5
23 99 4 0 1 5
36 100 6 8 20 5
1 17 15 9 17 7
57 58 20 4 4 4
1 14 11 3 7 10
63 50 11 2 11 8
95 88 2 9 13 3
54 75 18 1 19 3
98 82 1 8 20 5
17 15 9 1 17 5
23 68 17 7 14 7
96 33 4 0 3 3
6 93 5 9 20 3
45 56 1 6 9 1
39 58 7 10 12 5
86 78 19 2 11 1
23 85 15 5 11 4
69 75 19 10 16 5
36 44 2 10 16 4
74 12 20 8 8 1
60 14 7 6 13 10
5 65 17 4 4 2
35 59 14 5 19 10
93 71 19 2 18 4
86 36 18 4 16 5
83 58 11 10 20 4
42 20 7 10 11 9
46 31 11 5 18 8
58 44 20 0 19 7
61 87 6 0 7 9
83 30 19 2 17 2
99 43 8 3 13 7
68 76 15 7 16 10
16 38 9 6 20 5
86 51 15 10 11 3
27 58 5 5 12 10
42 18 15 4 18 7
4 93 18 4 8 9
88 1 3 0 11 2
57 34 15 2 18 7
98 96 12 4 8 6
27 35 15 6 9 3
31 19 6 4 14 10
35 88 4 9 9 6
65 72 10 2 3 6
44 2 2 2 20 5
30 5 16 4 17 9
10 44 11 1 10 4
19 67 14 2 18 7
93 3 13 7 13 5

#include<iostream>
#include<cstdio>
using namespace std;

int this_is_a_solution_to_the_A_plus_B_problem_set_by_vfleaking;

int INF;

int N, A[110], B[110], W[110], L[110], R[110], P[110];
int As[110];

int As_QS(int i, int j)
{
  int l, r, x;
  l = i; r = j;
  x = As[(i + j) / 2];

  while (i <= j)
    {
      while (As[i] < x)
      {
        i = i + 1;
      }
      while (As[j] > x) j = j - 1;
      if (i <= j)
        {
          int t;
          t = As[i];
          As[i] = As[j];
          As[j] = t;
          i = i + 1;
          j = j - 1;
        }
    }

  if (i < r) As_QS(i, r);
  if (l < j) As_QS(l, j);
  return 0;
}

int As_lower_bound(int x)
{
  int l, r;
  l = 1; r = N + 1;
  while (l != r)
    {
      int mid;
      if (As[mid = (l + r) / 2] >= x)
        r = mid;
      else
        l = mid + 1;
    }
  return l;
}

int here_comes_the_SEGMENT_TREE;
int sc, sroot[110], s[1500][2], inS[110], prev[1500];

int emp(int l, int r)
{
  int cur;
  cur = sc = sc + 1;
  if (l != r)
    {
      int mid;
      mid = (l + r) / 2;
      s[cur][0] = emp(l, mid);
      s[cur][1] = emp(mid + 1, r);
    }
  return cur;
}

int insert(int cur, int l, int r, int b, int c)
{
  int nx;
  nx = sc = sc + 1;
  prev[nx] = cur;
  s[nx][0] = s[cur][0];
  s[nx][1] = s[cur][1];
  cout << cur;
  putchar(124);
  cout << l;
  putchar(124);
  cout << r;
  putchar(124);
  cout << s[nx][0];
  putchar(124);
  cout << s[nx][1];
  putchar(32);
  if (l == r)
    inS[c] = nx;
  else
    {
      int mid;
      mid = (l + r) / 2;
      if (b <= mid)
      {
        cout << s[nx][0];
        putchar(32);
        s[nx][0] = insert(s[nx][0], l, mid, b, c);
      }
      else
      {
        cout << s[nx][1];
        putchar(32);
        s[nx][1] = insert(s[nx][1], mid + 1, r, b, c);
      }
    }
  return nx;
}

int here_comes_the_GRAPH_and_the_NETWORK_FLOW;

int source()
{
  return 1;
}

int sink()
{
  return 2;
}

int point_lv_1(int x)
{
  return 2 + x;
}

int point_lv_2(int x)
{
  return 2 + N + x;
}

int segnode(int x)
{
  return 2 + (N * 2) + x;
}

int e[6000], cp[6000], enxt[6000], head[1500], ec, nc;

int partner(int x)
{
  if (x % 2 == 1)
    return x + 1;
  else
    return x - 1;
}

int regi(int u, int v, int w)
{
  ec = ec + 1;
  e[ec] = v; cp[ec] = w;
  enxt[ec] = head[u]; head[u] = ec;
}

int directed(int u, int v, int w)
{
  regi(u, v, w);
  regi(v, u, 0);
}

int ANS;

int travel(int cur, int L, int R, int l, int r, int x)
{
  if ((L == l) && (R == r))
    {
      directed(point_lv_2(x), segnode(cur), INF);
      return 0;
    }
  int Mid; Mid = (L + R) / 2;
  if (r <= Mid)
    {
      travel(s[cur][0], L, Mid, l, r, x);
      return 0;
    }
  if (l > Mid)
    {
      travel(s[cur][1], Mid + 1, R, l, r, x);
      return 0;
    }
  travel(s[cur][0], L, Mid, l, Mid, x);
  travel(s[cur][1], Mid + 1, R, Mid + 1, r, x);
}

int pushflow(int E, int F)
{
  cp[E] = cp[E] - F;
  cp[partner(E)] = cp[partner(E)] + F;
}

int Nid, tag[1500], lyr[1500], cur[1500], pre[1500], prn[1500], supp[1500], comp[1500], Aug, Gap;

int relabel(int x)
{
  int ol, nl, E;
  ol = tag[x]; nl = nc;
  for (E = head[x]; E; E = enxt[E])
    if ((cp[E]) && (tag[x] <= tag[e[E]] + 1))
      if (nl > tag[e[E]] + 1)
        nl = tag[e[E]] + 1;
  lyr[nl] = lyr[nl] + 1;
  lyr[ol] = lyr[ol] - 1;
  tag[x] = nl;
  if (lyr[ol] == 0) Gap = 1;
  cur[x] = head[x];
}

int sap_initialize()
{
  int i;
  cout << nc << endl;
  for (i = 1; i <= nc; i = i + 1)
    {
      tag[i] = lyr[i] = 0;
      cur[i] = head[i];
    }
  lyr[0] = nc;
  Nid = source();
  Gap = 0;
  supp[Nid] = INF;
  comp[Nid] = 0;
}

int sap()
{
  int ans; ans = 0;
  while ((tag[source()] != nc) && (Gap == 0))
    {
      cout << Nid;
      putchar(32);
      if (Nid == sink())
        {
          int increment;
          increment = supp[Nid] - comp[Nid];
          cout << endl;
          putchar(65);
          putchar(32);
          cout << increment << endl;
          ans = ans + increment;
          int x;
          for (x = sink(); x != source(); x = prn[x])
            {
              comp[x] = comp[x] + increment;
              pushflow(pre[x], increment);
            }
        }
      Aug = 0;
      if (supp[Nid] > comp[Nid])
      {
        for (; (cur[Nid] != 0) && (Aug == 0); cur[Nid] = enxt[cur[Nid]])
          {
            int E;
            E = cur[Nid];
            if ((cp[E]) && (tag[Nid] == tag[e[E]] + 1))
              {
                Aug = 1;
                if (cp[E] < supp[Nid] - comp[Nid])
                  supp[e[E]] = cp[E];
                else
                  supp[e[E]] = supp[Nid] - comp[Nid];
                comp[e[E]] = 0;
                prn[e[E]] = Nid;
                pre[e[E]] = E;
                Nid = e[E];
              }
          }
      }
      if (Aug == 0)
        {
          if (Nid != sink()) relabel(Nid);
          if (Nid == source())
            comp[Nid] = 0;
          else
            Nid = prn[Nid];
        }
      else
        cur[Nid] = head[Nid];
    }
  cout << ans << endl;
  return ans;
}

int main()
{
  INF = 1000000000;

  cin >> N;
  int i;
  for (i = 1; i <= N; i = i + 1)
    cin >> A[i] >> B[i] >> W[i] >> L[i] >> R[i] >> P[i];
  ANS = 0;
  for (i = 1; i <= N; i = i + 1)
    ANS = ANS + B[i] + W[i];
  for (i = 1; i <= N; i = i + 1)
    As[i] = A[i];

  As_QS(1, N);
  cout << ANS << endl;

  sc = 0;
  cout << N << endl;
  sroot[0] = emp(1, N);
  cout << endl;
  for (i = 1; i <= N; i = i + 1)
    sroot[i] = insert(sroot[i - 1], 1, N, As_lower_bound(A[i]), i);
  cout << endl;
  cout << sc << endl;
  nc = segnode(sc);
  for (i = 1; i <= nc; i = i + 1)
    head[i] = 0;
  ec = 0;
  for (i = 1; i <= N; i = i + 1)
    {
      directed(source(), point_lv_1(i), B[i]);
      directed(point_lv_1(i), sink(), W[i]);
      directed(point_lv_1(i), point_lv_2(i), P[i]);
    }
  for (i = 1; i <= sc; i = i + 1)
    {
      if ((s[i][0] != 0) && (prev[i]))
        directed(segnode(i), segnode(prev[i]), INF);
      if (s[i][0]) directed(segnode(i), segnode(s[i][0]), INF);
      if (s[i][1]) directed(segnode(i), segnode(s[i][1]), INF);
    }
  for (i = 1; i <= N; i = i + 1)
    directed(segnode(inS[i]), point_lv_1(i), INF);
  for (i = 1; i <= N; i = i + 1)
    {
      int l, r;
      l = As_lower_bound(L[i]);
      r = As_lower_bound(R[i] + 1);
      if (l < r)
        travel(sroot[i - 1], 1, N, l, r - 1, i);
    }
  sap_initialize();
  ANS = ANS - sap();
  cout << ANS << endl;
  return 0;
}

int orzvfk;
int mo_bai_lv_kai_feng;
